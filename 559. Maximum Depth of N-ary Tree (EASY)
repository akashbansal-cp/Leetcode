//https://leetcode.com/problems/maximum-depth-of-n-ary-tree/
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    int maxDepth(Node* root) {
        if(root==NULL)
				return 0;
			int m=1;
			root->val=1;
			queue<Node*> data;
			data.push(root);
			while(data.empty()==false){
				Node* temp=data.front();
				data.pop();
				for(int i=0;i<temp->children.size();++i){
					data.push(temp->children[i]);
					temp->children[i]->val=temp->val+1;
					if(temp->children[i]->val > m)
						m=temp->children[i]->val;
				}
			}
			return m;
    }
};
