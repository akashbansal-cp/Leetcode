//https://leetcode.com/problems/sum-root-to-leaf-numbers/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
int sum = 0;
class Solution {
private:
	unsigned long long int solve(TreeNode* root){
        unsigned long long int x=0,y=0,z=0;
		if(root->left==NULL && root->right==NULL){
            if(root->val==0)
                return 1;
			sum+=root->val;
			return root->val;
		}
        int mf = root->val*10;
		if(root->left != NULL){
            x = solve(root->left);
            if(root->val==0){
            	if(root->left->val!=0)
                	z+=((x/root->left->val)*10);
            	else
                	z+=x*10;
			}
			else{
				if(root->left->val!=0){
					z+=((x/root->left->val)*mf);
					sum+=((x/root->left->val)*mf);
				}
            	else{
            		z+=x*mf;
            		sum+=x*mf;
				}
			}
        }
		if(root->right != NULL){
            y = solve(root->right);
            if(root->val==0){
            	if(root->right->val!=0)
                	z+=((y/root->right->val)*10);
            	else
                	z+=y*10;
			}
			else{
				if(root->right->val!=0){
					z+=((y/root->right->val)*mf);
					sum+=((y/root->right->val)*mf);
				}
            	else{
            		z+=y*mf;
            		sum+=y*mf;
				}
			}
        }
        cout << z << endl;
		return z;
	}
public:
	int sumNumbers(TreeNode* root){
        if(root==NULL)
            return 0;
		sum = 0;
		long long int x = solve(root);
		return sum;
	}
};
