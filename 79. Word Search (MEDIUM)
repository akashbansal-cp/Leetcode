//https://leetcode.com/problems/word-search/
class Solution{
	public:
		bool gofor(vector<vector<char>>& board,string word,int i,int j,int s1,int s2,int v,vector<vector<int>> visit){
			int z=0;
			bool a=true,b=true,c=true,d=true;
			for(int m=0;m<visit.size();++m){
				if(visit[m][0]==i-1 && visit[m][1]==j && i-1>=0)
					a=false;
				if(visit[m][0]==i && visit[m][1]==j-1 && j-1>=0)
					b=false;
				if(visit[m][0]==i+1 && visit[m][1]==j && i+1<s1)
					c=false;
				if(visit[m][0]==i && visit[m][1]==j+1 && j+1<s2)
					d=false;
			}
			if(i-1>=0 && board[i-1][j]==word[v] && a){
				if(word.length()==v+1)
					return true;
				visit.push_back({i-1,j});
				if(gofor(board,word,i-1,j,s1,s2,v+1,visit))
					return true;
				visit.pop_back();
			}
			if(j-1>=0 && board[i][j-1]==word[v] && b){
				if(word.length()==v+1)
					return true;
				visit.push_back({i,j-1});
				if(gofor(board,word,i,j-1,s1,s2,v+1,visit))
					return true;
				visit.pop_back();
			}
			if(i+1<s1 && board[i+1][j]==word[v] && c){
				if(word.length()==v+1)
					return true;
				visit.push_back({i+1,j});
				if(gofor(board,word,i+1,j,s1,s2,v+1,visit))
					return true;
				visit.pop_back();
			}
			if(j+1<s2 && board[i][j+1]==word[v] && d){
				if(word.length()==v+1)
					return true;
				visit.push_back({i,j+1});
				if(gofor(board,word,i,j+1,s1,s2,v+1,visit))
					return true;
				visit.pop_back();
			}

			return false;
		}
		bool exist(vector<vector<char>> board,string word){
            vector<vector<int>> visit;
			for(int i=0;i<board.size();++i){
				for(int j=0;j<board[i].size();++j){
					if(board[i][j]==word[0]){
                        if(word.length()==1)
                            return true;
						visit.push_back({i,j});
						if(gofor(board,word,i,j,board.size(),board[i].size(),1,visit))
							return true;
						else
							visit.pop_back();
					}
				}
			}
			return false;
		}
};
